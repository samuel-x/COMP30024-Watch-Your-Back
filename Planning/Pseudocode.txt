train(Node root, int seconds):
    endTime = Clock.now() + seconds
    while (Clock.now < endTime):
        simulate(root)

select(Node node, int Ni):
    scores = []
    unexploredNodesScore = UCB1(1, 2, Ni)
    nodes = parent.children()
    deltas = node.board.getMoves(node.pos)

    if (len(nodes) > 0):
        for node in nodes:
            deltas.remove(node.delta)
            scores.append((node, UCB1(node.wins, nodes.numSimulations, Ni)))        

        sortedScores = sorted(scores, key=lambda x:x[1], reverse=True)
        for childNode, score in sortedScores:
            if (score > exploredNodesScore):
                # This is to avoid re-exploring a leaf node that resulted in a win or loss. We want to explore new options. Otherwise we'd have wasted this simulation or backpropagated the same result twice.
                if (childNode.board.phase == GamePhase.FINISHED):
                    continue
                else:
                    return childNode
            else:
                break

    randomDelta = random(deltas)
    return Node(node, getNextBoard(board, randomDelta), randomDelta)


UCB1(wi, ni, Ni):
    return wi/ni + C * sqrt(logn(Ni)/ni)


simulate(Node root):

    leaf = select(root, root.numSimulations)
    while(leaf.board.phase != GamePhase.FINISHED):
        leaf = select(leaf, root.numSimulations)

    backpropogate(leaf, leaf.board.winner)
    
backPropagate(node, winner):
    # Can be done recursively, but no point in using a stack. Iteratively
    # is more memory efficient.

    while(node != None):
        node.timesExplored += 1

        if (node.board.winner == winner):
            node.wins += 1
        else if (node.board.winner == None):
            node.wins += 0.5 # Must have been a tie

        node = node.parent